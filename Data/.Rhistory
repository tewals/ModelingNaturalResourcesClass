pool*(10000/sum(pool*c(1,2,3,4)*.02))
(10000/sum(pool*c(1,2,3,4)*.02))
setwd("C:/Users/Tim Walsworth/Dropbox/Teaching/ParameterEstimationNatResModeling/Git_ModelingCourse/ModelingNaturalResourcesClass/Data")
# Read in data
agedata <- read.csv("WATS6900_Homework3_AgeStructuredData.csv")
harvdata <- read.csv("WATS6900_Homework3_HarvestRates.csv")
# View data structure
head(agedata)
head(harvdata)
agedata <- agedata[,2:length(agedata)]
harvdata <- harvdata[,2:length(harvdata)]
Ntotal <- colSums(agedata) #for total abundance, take the sum of the whole column - all individuals at each tiem step
cols <- c("black", "dodgerblue", "darkorange", "darkgreen", "red") #vector of colors to match with each age
par(mar=c(5, 5, .5, .5))
plot(x = seq(1,40), y=Ntotal, type = "l", lwd=2, col=cols[1],
ylab = "Abundance", xlab = "Year", las=1, ylim=c(0, 3000)) #year x abundance, use first color in color vector
for(i in 1:4) { #for loop to plot all the different ages
lines(x = seq(1,40), y=agedata[i,], lwd=2, col=cols[i+1]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Total", "Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
#Plot time series of harvest rates
Ntotal <- colSums(harvdata)
cols <- c("black", "dodgerblue", "darkorange", "darkgreen", "red") #vector of colors to match with each age
par(mar=c(5, 5, .5, .5))
plot(x = seq(1,40), y=Ntotal, type = "l", lwd=2, col=cols[1],
ylab = "Harvest", xlab = "Year", las=1)
for(i in 1:4) { #for loop to plot all the different ages
lines(x = seq(1,40), y=harvdata[i,], lwd=2, col=cols[i+1]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Total", "Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
# State prediction function
ages.mod<-function(nage, f1, f2, f3, f4, s0, s1, s2, s3, s4 ,dd,ts,nstart){
Nt<-matrix(0,nrow=nage,ncol=ts) # Create storage for state predictions
Nt[,1]<-nstart # Initialize population abundance at age
# Loop through each time step
for(i in 2:ts){
# Rewrite Leslie matrix to incorporate new total abundance
leslie<-matrix(c(f1*(s0*exp(-dd*sum(Nt[,i-1]))),
f2*(s0*exp(-dd*sum(Nt[,i-1]))),
f3*(s0*exp(-dd*sum(Nt[,i-1]))),
f4*(s0*exp(-dd*sum(Nt[,i-1]))),
s1,0,0,0,
0,s2,0,0,
0,0,s3, s4),
nrow=nage,ncol=nage,byrow=T)
# Predict new abundance at age
Nt[,i]<-leslie %*% (Nt[,i-1])
}
return(Nt) # Return matrix of abundance at age through time
}
#Test the function
f1 = 0
f2 = 10
f3 = 20
f4 = 50
s0 = .1
s1 = .3
s2 = .5
s3 = .7
s4 = .8
ages.mod(nage=4, f1 = f1, f2=f2, f3=f3, f4=f4, s0=s0, s1=s1, s2=s2, s3=s3, s4=s4,
dd=0.0003, ts=50, nstart=agedata[,1])
nllfit <- function(nage, f1, f2, f3, f4, s0, s1, s2, s3, s4 ,dd,ts,nstart, obs, logod) {
#predict the population dynamics with the specified parameters
predN <- ages.mod(nage=nage, f1=f1, f2=f2, f3=f3, f4=f4,
s0=s0, s1=s1, s2=s2, s3=s3, s4=s4,dd=dd,ts=ts,nstart=nstart)
predN <- round(predN) #round to integer values because we don't care about fractions of individuals
llh <- matrix(data = 0, nrow=nage, ncol=ts)
for(i in 1:ts) {
for(j in 1:nage) {
llh[j , i] <- dnbinom(x = obs[j, i], mu = predN[j, i], size=exp(logod))
}
}
#Calculate the neg bin likelihood of the observed values given the model predictions
nll <- -1*sum(log(llh), na.rm = T) #Infinity means you are taking the log of 0 - remove 0 by decreasing the od parameter to increase variance
return(nll)
}
#test it out to make sure it works
nllfit(nage = 4, f1=f1, f2=f2, f3=f3, f4=f4,
s0=s0, s1=s1, s2=s2, s3=s3, s4=s4, dd=0.0003, ts=length(agedata),
nstart=agedata[,1], obs=agedata, logod=log(1))
# Load libraries
library(bbmle)
#Starting guesses
start.list <- list(s0 = .1,
dd = 0.0003,
logod = log(10)
)
data.list <- list(obs = agedata,
nage = 4,
f1 = f1,
f2 = f2,
f3 = f3,
f4 = f4,
s1 = s1,
s2 = s2,
s3 = s3,
s4 = s4,
ts=length(agedata),
nstart=agedata[,1]
)
# Estimate parameters with mle2
fit1 <- mle2(minuslogl=nllfit, start=start.list, data=data.list,
fixed=NULL, method="SANN")
warnings()
cfs<- exp(coef(fit1))
cfs
# Calculate model predicted values
PredN <- ages.mod(nage=4, f1 = f1, f2=f2, f3=f3, f4=f4,
s0=cfs[1], s1=s1, s2=s2, s3=s3, s4=s4,
dd=cfs[2], ts=40, nstart=agedata[,1])
#Visualize the predicted values
cols <- c("dodgerblue", "darkorange", "darkgreen", "red")
plot(x = seq(1,40), y=agedata[1,], type = "p", lwd=2, col=cols[1],
ylab = "Estimated Abundance", xlab = "Year", las=1)
for(i in 2:4) { #for loop to plot all the different ages
points(x = seq(1,40), y=agedata[i,], col=cols[i]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
#add the goodness of fit
lines(x=seq(1,40), y=PredN[1,], lwd=2, col="dodgerblue")
.
# State prediction function
ages.mod<-function(nage, f1, f2, f3, f4, s0, s1, s2, s3, s4 ,dd,ts,nstart){
Nt<-matrix(0,nrow=nage,ncol=ts) # Create storage for state predictions
Nt[,1]<-nstart # Initialize population abundance at age
# Loop through each time step
for(i in 2:ts){
# Rewrite Leslie matrix to incorporate new total abundance
leslie<-matrix(c(f1*(s0*exp(-dd*sum(Nt[,i-1]))),
f2*(s0*exp(-dd*sum(Nt[,i-1]))),
f3*(s0*exp(-dd*sum(Nt[,i-1]))),
f4*(s0*exp(-dd*sum(Nt[,i-1]))),
s1,0,0,0,
0,s2,0,0,
0,0,s3, s4),
nrow=nage,ncol=nage,byrow=T)
# Predict new abundance at age
Nt[,i]<-leslie %*% (Nt[,i-1])
Nt[Nt[,i]<0,i]<-0
}
return(Nt) # Return matrix of abundance at age through time
}
# Estimate parameters with mle2
fit1 <- mle2(minuslogl=nllfit, start=start.list, data=data.list,
fixed=NULL, method="SANN")
cfs<- exp(coef(fit1))
cfs
# Calculate model predicted values
PredN <- ages.mod(nage=4, f1 = f1, f2=f2, f3=f3, f4=f4,
s0=cfs[1], s1=s1, s2=s2, s3=s3, s4=s4,
dd=cfs[2], ts=40, nstart=agedata[,1])
#Visualize the predicted values
cols <- c("dodgerblue", "darkorange", "darkgreen", "red")
plot(x = seq(1,40), y=agedata[1,], type = "p", lwd=2, col=cols[1],
ylab = "Estimated Abundance", xlab = "Year", las=1)
for(i in 2:4) { #for loop to plot all the different ages
points(x = seq(1,40), y=agedata[i,], col=cols[i]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
#add the goodness of fit
lines(x=seq(1,40), y=PredN[1,], lwd=2, col="dodgerblue")
nllfit <- function(nage, f1, f2, f3, f4, ls0, s1, s2, s3, s4 ,ldd,ts,nstart, obs, logod) {
s0<-exp(ls0)
dd<-exp(ldd)
#predict the population dynamics with the specified parameters
predN <- ages.mod(nage=nage, f1=f1, f2=f2, f3=f3, f4=f4,
s0=s0, s1=s1, s2=s2, s3=s3, s4=s4,dd=dd,ts=ts,nstart=nstart)
predN <- round(predN) #round to integer values because we don't care about fractions of individuals
llh <- matrix(data = 0, nrow=nage, ncol=ts)
for(i in 1:ts) {
for(j in 1:nage) {
llh[j , i] <- dnbinom(x = obs[j, i], mu = predN[j, i], size=exp(logod))
}
}
#Calculate the neg bin likelihood of the observed values given the model predictions
nll <- -1*sum(log(llh), na.rm = T) #Infinity means you are taking the log of 0 - remove 0 by decreasing the od parameter to increase variance
return(nll)
}
#Starting guesses
start.list <- list(ls0 =log(.1) ,
ldd = log(0.0003),
logod = log(10)
)
data.list <- list(obs = agedata,
nage = 4,
f1 = f1,
f2 = f2,
f3 = f3,
f4 = f4,
s1 = s1,
s2 = s2,
s3 = s3,
s4 = s4,
ts=length(agedata),
nstart=agedata[,1]
)
# Estimate parameters with mle2
fit1 <- mle2(minuslogl=nllfit, start=start.list, data=data.list,
fixed=NULL, method="SANN")
cfs<- exp(coef(fit1))
cfs
# Calculate model predicted values
PredN <- ages.mod(nage=4, f1 = f1, f2=f2, f3=f3, f4=f4,
s0=cfs[1], s1=s1, s2=s2, s3=s3, s4=s4,
dd=cfs[2], ts=40, nstart=agedata[,1])
#Visualize the predicted values
cols <- c("dodgerblue", "darkorange", "darkgreen", "red")
plot(x = seq(1,40), y=agedata[1,], type = "p", lwd=2, col=cols[1],
ylab = "Estimated Abundance", xlab = "Year", las=1)
for(i in 2:4) { #for loop to plot all the different ages
points(x = seq(1,40), y=agedata[i,], col=cols[i]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
#add the goodness of fit
lines(x=seq(1,40), y=PredN[1,], lwd=2, col="dodgerblue")
# State prediction function
ages.mod<-function(nage, f1, f2, f3, f4, s0, s1, s2, s3, s4 ,dd,ts,nstart){
Nt<-matrix(0,nrow=nage,ncol=ts) # Create storage for state predictions
Nt[,1]<-nstart # Initialize population abundance at age
# Loop through each time step
for(i in 2:ts){
# Rewrite Leslie matrix to incorporate new total abundance
leslie<-matrix(c(f1*(s0*exp(-dd*sum(Nt[,i-1]))),
f2*(s0*exp(-dd*sum(Nt[,i-1]))),
f3*(s0*exp(-dd*sum(Nt[,i-1]))),
f4*(s0*exp(-dd*sum(Nt[,i-1]))),
s1,0,0,0,
0,s2,0,0,
0,0,s3, s4),
nrow=nage,ncol=nage,byrow=T)
# Predict new abundance at age
Nt[,i]<-leslie %*% (Nt[,i-1])
#Nt[Nt[,i]<0,i]<-0
}
return(Nt) # Return matrix of abundance at age through time
}
nllfit <- function(nage, f1, f2, f3, f4, ls0, s1, s2, s3, s4 ,ldd,ts,nstart, obs, logod) {
s0<-exp(ls0)
dd<-exp(ldd)
#predict the population dynamics with the specified parameters
predN <- ages.mod(nage=nage, f1=f1, f2=f2, f3=f3, f4=f4,
s0=s0, s1=s1, s2=s2, s3=s3, s4=s4,dd=dd,ts=ts,nstart=nstart)
predN <- round(predN) #round to integer values because we don't care about fractions of individuals
llh <- matrix(data = 0, nrow=nage, ncol=ts)
for(i in 1:ts) {
for(j in 1:nage) {
llh[j , i] <- dnbinom(x = obs[j, i], mu = predN[j, i], size=exp(logod))
}
}
#Calculate the neg bin likelihood of the observed values given the model predictions
nll <- -1*sum(log(llh), na.rm = T) #Infinity means you are taking the log of 0 - remove 0 by decreasing the od parameter to increase variance
return(nll)
}
# Estimate parameters with mle2
fit1 <- mle2(minuslogl=nllfit, start=start.list, data=data.list,
fixed=NULL, method="SANN")
cfs<- exp(coef(fit1))
cfs
# Calculate model predicted values
PredN <- ages.mod(nage=4, f1 = f1, f2=f2, f3=f3, f4=f4,
s0=cfs[1], s1=s1, s2=s2, s3=s3, s4=s4,
dd=cfs[2], ts=40, nstart=agedata[,1])
#Visualize the predicted values
cols <- c("dodgerblue", "darkorange", "darkgreen", "red")
plot(x = seq(1,40), y=agedata[1,], type = "p", lwd=2, col=cols[1],
ylab = "Estimated Abundance", xlab = "Year", las=1)
for(i in 2:4) { #for loop to plot all the different ages
points(x = seq(1,40), y=agedata[i,], col=cols[i]) #use row i to get each timestep
}
legend("topright", lwd=2, legend=c("Age1", "Age2", "Age3", "Age4"),
bty="n", col=cols)
#add the goodness of fit
lines(x=seq(1,40), y=PredN[1,], lwd=2, col="dodgerblue")
frec<- read.csv("WATS6900_2022_HW2_FisheryRecovery.csv")
head(frec)
###################
# 1. Visualize the data
###################
plot(frec$EstAbundance~frec$Year, xlab="Year",
ylab="Estimated Abundance x 1000", pch=16)
plot(frec$Harvest~frec$Year, xlab="Year", ylab="Harvest", pch=16)
schf.mod<- function(nstart, ts, r, k, hv){
abun<- rep(0, ts) #create vector to store abundance predictions
abun[1]<- nstart #set initial value to nstart
#loop through all subsequent time steps to predict abundance
# through time
for (i in 2:ts) {
abun[i]<- (abun[i-1]*(1+r*(1-(abun[i-1]/k))))-hv[i-1]
}
for (i in 1:length(abun)) {
if (abun[i]<0) {
abun[i]<- 0
} #need to get rid of negative abundance predictions
}
abun<- round(abun)
return(abun)
}
schf.mod<- function(nstart, ts, r, k, hv){
abun<- rep(0, ts) #create vector to store abundance predictions
abun[1]<- nstart #set initial value to nstart
#loop through all subsequent time steps to predict abundance
# through time
for (i in 2:ts) {
abun[i]<- (abun[i-1]*(1+r*(1-(abun[i-1]/k))))-hv[i-1]
}
# TW Comment: This following chunk of code is generally included within the
#             for-loop above. After calculating abun[i], check if it is less
#             than zero and set to zero if it is negative.
for (i in 1:length(abun)) {
if (abun[i]<0) {
abun[i]<- 0
} #need to get rid of negative abundance predictions
}
abun<- round(abun)
return(abun)
}
#od is a parameter for negative binomial error structure
nll.fit<- function(nstart, ts, lr, lk, hv, obs, lod){
r<- exp(lr)
k<- exp(lk)
od<- exp(lod)
#predict abundances using specified parameters
predn<- schf.mod(nstart=nstart, ts=ts, r=r, k=k, hv=hv)
#calc NLL of pred values given obs
likely<- rep(NA, length(obs))
for (i in 1:length(obs)) {
if(!is.na(obs[i])) {
likely[i]<- dnbinom(x=obs[i], mu=predn[i], size=od)
}
}
# cannot run a natural log on 0 (likely vector has 0's)
# so only log the non 0's
# for (i in 1:length(likely)) {
#   if (likely[i] != 0) {
#     likely[i]<- log(likely[i])
#   }
# }
negl<- -1*sum(log(likely[!is.na(likely)]))
return(negl)
}
#test that the function only returns one value
nll.fit(nstart = frec$EstAbundance[1], ts = length(frec$EstAbundance),
lr = log(.3), lk = log(500000), hv = frec$Harvest,
obs = frec$EstAbundance, lod = log(1))
test<- schf.mod(nstart = frec$EstAbundance[1], ts = length(frec$EstAbundance),
r = .3, k = 500000, hv = frec$Harvest)
# Estimate parameters with mle2, as there are 3: r, k, theta
par.start.list<- list(lr= log(.4),
lk= log(500000),
lod= log(10))
data.start.list<- list(nstart= frec$EstAbundance[1],
ts= length(frec$EstAbundance),
hv= frec$Harvest,
obs= frec$EstAbundance)
fit.2<- mle2(minuslogl = nll.fit, start = par.start.list, fixed = NULL,
data = data.start.list, method = "Nelder-Mead") ##WORKS!!!!!!!!
cfs<- exp(coef(fit.2)) #good parameters
###
# Feed our parameters into the sch.mod function to calc
# predicted abundance at each time step
###
popN<- schf.mod(nstart = frec$EstAbundance[1], ts = length(frec$EstAbundance),
r = cfs[1], k = cfs[2], hv = frec$Harvest)
# Plot observed data
plot(frec$Year, frec$EstAbundance, xlab = "Year", ylab = "Estimated Abundace",
pch=16)
# Add a line with our model fit
lines(frec$Year, popN, lwd=2) # looks ok, but why not smooth?
lwr<- qnbinom(p = .025, mu = popN, size = cfs[3])
upr<- qnbinom(p = .975, mu = popN, size = cfs[3])
# Add uncertainty estimates as error bars
# first change the lines to points
plot(frec$Year, frec$EstAbundance, xlab = "Year",
ylab = "Estimated Abundance",
pch=1)
points(frec$Year, popN, pch=16)
segments(x0 = frec$Year, x1 = frec$Year,
y0 = lwr, y1 = upr) # works but ugly
# Display uncertainty as shaded polygon
pdf("try.pdf")
dev.off()
plot(frec$Year, frec$EstAbundance, xlab = "Year",
ylab = "Estimated abundance",
pch=16)
polygon(x = c(frec$Year, rev(frec$Year)),
y = c(lwr, rev(upr)),
col = adjustcolor("dodgerblue",.25),
border = adjustcolor("dodgerblue", .25))
lines(frec$Year, popN, lwd=2)
# A. Create a vector of r values to examine
rvec<- seq(.1, .25, length.out=100)
nlls.r<- rep(NA, length(rvec)) # storage vector for nll of the model at each fixed
start_list<- list(lk=log(2*cfs[2]), lod=log(1))
data_list<- list(nstart = frec$EstAbundance[1],
ts = length(frec$EstAbundance),
hv = frec$Harvest,
obs = frec$EstAbundance)
for (i in 1:length(rvec)) {
fitlpr<- mle2(minuslogl = nll.fit, start = start_list,
fixed = list(lr = log(rvec[i])),
data = data_list)
nlls.r[i]<- -1*logLik(fitlpr)
}
plot(rvec, nlls.r-(-1*logLik(fit.2)))
abline(h=1.92)
target.nll<- min(nlls.r)+1.92 #what is the target value of NLL for CI limits
#specify the range of r values in which the lower CI exists
r.test<- rvec[1:which.min(abs(rvec-cfs[1]))] #indexes the descending limb of rvalues
#specify vector of nll values associated with r values being examined
nll.test<- nlls.r[1:which.min(abs(rvec-cfs[1]))] #rvec and nll.r are same length
# Estimate the r value at which the relationship between r and nll crosses
# the target.nll
lwr.r<- approx(y=r.test, x=nll.test, xout = target.nll)$y
#another way to visualize this
plot(x=nll.test, y=r.test)
abline(v=target.nll)
# specify the range of r values for the ascending limb (for uppr CI)
r.test2<- rvec[which.min(abs(rvec-cfs[1])):length(rvec)] # 74-100
# specify the vector of NLL values associated with r values examined
nll.test2<- nlls.r[which.min(abs(rvec-cfs[1])): length(nlls.r)]
upr.r<- approx(y=r.test2, x=nll.test2, xout = target.nll)$y
plot(x=nll.test2, y=r.test2)
abline(v=target.nll)
# Upper and lower limits to the 95% CI of our growth rate parameter
lwr.r
upr.r
kvec<- seq(450000,600000, length.out = 100)
nlls.k<- rep(NA, length(kvec))
for (i in 1:length(kvec)) {
fitlpk<- mle2(minuslogl = nll.fit,
start = list(lr= log(1.5*cfs[1]), lod = log(1)),
fixed = list(lk = log(kvec[i])),
data = list(nstart = frec$EstAbundance[1],
ts = length(frec$EstAbundance),
hv = frec$Harvest,
obs = frec$EstAbundance))
nlls.k[i]<- -1*logLik(fitlpk)
}
plot(kvec, nlls.k - (-1*logLik(fit.2)))
plot(kvec, nlls.k - min(nlls.k))
abline(h=1.92)
target.nll.k<- min(nlls.k)+1.92 # gives the nll values 1.92 above the MLE
#specify the K values that are on the descending limb
k.test<- kvec[1:which.min(abs(kvec-cfs[2]))] #1-50
# specify the NLL of the k values on the descending limb
nll.test.k<- nlls.k[1:which.min(abs(kvec-cfs[2]))]
# Use approx func to see at what value of k, the relationship
# with NLL crosses the target nll
lwr.k<- approx(y=k.test, x=nll.test.k, xout = target.nll.k)$y
# 507878
plot(x=nll.test.k, y=k.test)
abline(v=target.nll.k)
# Specify the k values on the ascending limb
k.test2<- kvec[which.min(abs(kvec-cfs[2])): length(kvec)] # 50-100
#specify the nll values for the k vals on the ascending lim
nll.test.k2<- nlls.k[which.min(abs(kvec-cfs[2])):length(nlls.k)] #50-100
# use the approx function to establish where the relationship b/w
# k and nll crosses the target nll
upr.k<- approx(y= k.test2, x=nll.test.k2, xout = target.nll.k)$y
# 541252.5
plot(x=nll.test.k2, y=k.test2)
abline(v=target.nll.k)
popN[120]
cfs[2]
lwr.r
upr.r
# 1. Intrinsic growth rate of population
cfs[1]
# 2. Carrying Capacity
cfs[2]
lwr.k
upr.k
# 3a. What proportion of carrying capacity is the population at now (yr 120)
popN[120]/cfs[2]
# 3b.What proportion of K did the population reach at it's lowest
# abundance during the period of commercial fishing
min(popN)
length(popN)
min(frec$EstAbundance[!is.na(frec$EstAbundance)])
#133587
min(frec$EstAbundance[!is.na(frec$EstAbundance)])/cfs[2]
# At year 68, abundance estimates were the lowest on record,
# at 133587 estimated individuals in the fishery, the population
# was just at 25% of it's carrying capacity.
popN[68]
524074.8/2 #262037
test<- schf.mod(nstart = frec$EstAbundance[1], ts = length(frec$EstAbundance),
r = .3, k = 500000, hv = rep(10000,120))
harvest.func<- function(nstart, ts, r, k, hv){
try.n<- rep(NA, 100)
try.n[1]<- popN[120]
for (i in 2:ts) {
try.n[i]<- (try.n[i-1]*(1+r*(1-(try.n[i-1]/k))))-hv[i-1]
}
try.n<- round(try.n)
return(try.n)
}
harv.1<- harvest.func(nstart = popN[120], ts = 100,
r = .2107, k = 524074.8, hv = rep(27000,100))
harv.1[]
yrs.try.n<- c(121:220)
plot(x=yrs.try.n, y=harv.1, ylim=c(0,max(harv.1)), type="l", lwd=2,
xlab = "Years", ylab = "Forecasted Abundance")
abline(h=524074.8/2)
length(yrs.try.n)
length(harv.1)
